@model IEnumerable<Front_end.Controllers.EvaluationDTO>
<link rel="stylesheet" href="~/css/register.css" />
 <style>
        h2 {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
            font-size: 2rem;
        }

        .d-flex {
            display: flex;
            justify-content: flex-end;
            margin-bottom: 20px;
        }

        .btn {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            transition: background-color 0.3s ease;
        }

        .btn-primary {
            background-color: #007bff;
        }

        .btn-primary:hover {
            background-color: #0056b3;
        }

        .ms-5 {
            margin-left: 20px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        table thead {
            background-color: #007bff;
            color: white;
        }

        table th, table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        table tbody tr:hover {
            background-color: #f1f1f1;
        }


        media (max-width: 768px) {
            .btn {
                padding: 8px 16px;
            }

            table th, table td {
                padding: 10px;
                font-size: 0.9rem;
            }
        }
    </style>
<h2>Evaluations</h2>

<div class="d-flex justify-content-end">
    <a href="@Url.Action("Create")" class="btn btn-primary">Add New Evaluation</a>
    <a id="send-grade" href="javascript:void(0);" onclick="sendGrade()" class="btn btn-primary ms-5">Send grade to student</a>
</div>
<table class="table mt-4">
    <thead>
        <tr>
            <th>Student id</th>
            <th>Student name</th>
            <th>Grade</th>
            <th>Explanation</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.StudentId</td>
                <td>@item.StudentName</td>
                <td>@item.Grade</td>
                <td>@item.AdditionExplanation</td>
                <td>
                    <a href="@Url.Action("Edit", new { id = item.EvaluationId })">Edit</a> |
                    <a href="javascript:void(0);" onclick="confirmDelete(@item.EvaluationId)">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="overlay" id="loading-overlay">
    <div class="spinner"></div>
</div>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script>
    function confirmDelete(evaluationId) {
        if (confirm("Are you sure you want to delete this evaluation?")) {
            $("#loading-overlay").css('display', 'flex');
            const jwtToken = getCookie("JwtToken");

            $.ajax({
                url: `http://localhost:5224/api/Evaluations/${evaluationId}`,
                type: 'DELETE',
                beforeSend: function (xhr) {
                    xhr.setRequestHeader('Authorization', `Bearer ${jwtToken}`);
                },
                success: function (response) {
                    $("#loading-overlay").hide();
                    window.location.reload();
                },
                error: function (xhr, status, error) {
                    let errorMessage = 'An error occurred.';

                    try {
                        const responseJson = JSON.parse(xhr.responseText);
                        if (responseJson.errors) {
                            let formattedErrors = `Error Code: ${responseJson.status}\n`;
                            for (const [key, messages] of Object.entries(responseJson.errors)) {
                                formattedErrors += `${key}: \n${messages.join('\n')} \n`;
                            }
                            errorMessage = formattedErrors.trim();
                        } else if (responseJson.title) {
                            errorMessage = `${responseJson.title}: ${responseJson.detail || 'No details provided'}`;
                        } else {
                            errorMessage = `Error: ${xhr.responseText}`;
                        }
                    } catch (e) {
                        errorMessage = `Error: ${xhr.responseText}`;
                    }

                    $("#loading-overlay").hide();
                    alert(errorMessage);
                }
            });
        }
    }

    function sendGrade() {
        $("#loading-overlay").css('display', 'flex');
        const jwtToken = getCookie("JwtToken");

        $.ajax({
            url: `http://localhost:5224/SendGrade`,
            type: 'POST',
            beforeSend: function (xhr) {
                xhr.setRequestHeader('Authorization', `Bearer ${jwtToken}`);
            },
            success: function (response) {
                $("#loading-overlay").hide();
                alert("Send grade successfully!");
            },
            error: function (xhr, status, error) {
                let errorMessage = 'An error occurred.';
                try {
                    const responseJson = JSON.parse(xhr.responseText);
                    if (responseJson.errors) {
                        let formattedErrors = `Error Code: ${responseJson.status}\n`;
                        for (const [key, messages] of Object.entries(responseJson.errors)) {
                            formattedErrors += `${key}: \n${messages.join('\n')} \n`;
                        }
                        errorMessage = formattedErrors.trim();
                    } else if (responseJson.title) {
                        errorMessage = `${responseJson.title}: ${responseJson.detail || 'No details provided'}`;
                    } else {
                        errorMessage = `Error: ${xhr.responseText}`;
                    }
                } catch (e) {
                    errorMessage = `Error: ${xhr.responseText}`;
                }

                $("#loading-overlay").hide();
                alert(errorMessage);
            }
        });

    }
</script>